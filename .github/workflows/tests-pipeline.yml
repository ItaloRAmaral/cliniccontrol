name: Unit Tests Pipeline

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  tests-pipeline:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ github.workspace }}

    strategy:
      matrix:
        node-version: [18]
        npm-version: [8]
        yarn-version: ['1.22.x']
        pnpm-version: [8]

    steps:
      - name: Checkout [Default Branch]
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          token: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Detect package manager
        id: package_manager
        run: |
          echo "package_manager=$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")" >> $GITHUB_ENV

      - name: Set node/npm/yarn versions using volta
        uses: volta-cli/action@v3
        with:
          node-version: '${{ matrix.node-version }}'
          npm-version: '${{ matrix.npm-version }}'
          yarn-version: '${{ matrix.yarn-version }}'
          pnpm-version: '${{ matrix.pnpm-version }}'

      - name: Install PNPM
        if: env.package_manager == 'pnpm'
        uses: pnpm/action-setup@v2.2.1
        with:
          version: '${{ matrix.pnpm-version }}'

      - name: Print node/npm/yarn/pnpm versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )
          echo "Node: ${node_ver:1}"
          echo "NPM: $(npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi
          echo "node_version=${node_ver:1}" >> $GITHUB_ENV

      - name: Use the node_modules cache if available [npm]
        if: env.package_manager == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Use the node_modules cache if available [pnpm]
        if: env.package_manager == 'pnpm'
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ env.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Get yarn cache directory path
        if: env.package_manager == 'yarn'
        id: yarn-cache-dir-path
        run: echo "yarn_cache_dir_path=$(yarn cache dir)" >> $GITHUB_ENV

      - name: Use the node_modules cache if available [yarn]
        if: env.package_manager == 'yarn'
        uses: actions/cache@v2
        with:
          path: ${{ env.yarn_cache_dir_path }}
          key: ${{ runner.os }}-node-${{ env.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Install dependencies
        run:
          if [ -f ./pnpm-lock.yaml ]; then
          echo "Running pnpm install --frozen-lockfile"
          pnpm install --frozen-lockfile
          else
          echo "Installing pnpm"
          yarn add pnpm
          echo "Running pnpm install --frozen-lockfile"
          pnpm install --frozen-lockfile
          fi
          # if [ "${{ env.package_manager == 'yarn' }}" == "true" ]; then
          #   echo "Running yarn install --frozen-lockfile"
          #   yarn install --frozen-lockfile
          # elif [ "${{ env.package_manager == 'pnpm' }}" == "true" ]; then
          #   echo "Running pnpm install --frozen-lockfile"
          #   pnpm install --frozen-lockfile
          # else
          #   echo "Running npm ci"
          #   npm ci
          # fi

      - name: Run tests
        run: pnpm run test:unit
